// this file is generated by servgen util based on a template at 2021-06-26 10:37:24 +0300 MSK
package storage

import (
	"context"

	"git.jetbrains.space/orbi/fcsd/auth/internal/config"
	"git.jetbrains.space/orbi/fcsd/auth/internal/domain"
	"git.jetbrains.space/orbi/fcsd/auth/internal/logger"
	"git.jetbrains.space/orbi/fcsd/auth/internal/meta"
	kitCache "git.jetbrains.space/orbi/fcsd/kit/cache/redis"
	kitStorage "git.jetbrains.space/orbi/fcsd/kit/db"
	"git.jetbrains.space/orbi/fcsd/kit/log"
	"golang.org/x/sync/errgroup"
)

// Adapter provides a contract to access a remote service
type Adapter interface {
	Init(cfg *config.Storages) error
	GetUserStorage() domain.UserStorage
	GetSessionStorage() domain.SessionStorage
	Close()
}

// container contains all the storages the adapter provides access to
type container struct {
	Db         *kitStorage.Storage
	ReadOnlyDB *kitStorage.Storage
	Cache      *kitCache.Redis
}

// adapterImpl implements storage adapter
type adapterImpl struct {
	container *container
	userStorage *userStorageImpl
	sessionStorage *sessionStorageImpl

}

// NewAdapter creates a new instance of the adapter
func NewAdapter() Adapter {
	a := &adapterImpl{
		container: &container{},
	}
    a.userStorage = newUserStorage(a.container)
	a.sessionStorage = newSessionStorage(a.container)
	return a
}

func (a *adapterImpl) l() log.CLogger {
	return logger.L().Srv("auth").Cmp("adapter-storage")
}

func (a *adapterImpl) Init(cfg *config.Storages) error {

	grp, _ := errgroup.WithContext(context.Background())

	// db master
	grp.Go(func() error {
		var err error
		a.container.Db, err = kitStorage.Open(cfg.Database.Master, logger.LF())
		if err != nil {
			return err
		}

		// applying migrations (leader only)
		if meta.Meta.Leader() && cfg.Database.MigPath != "" {
			db, _ := a.container.Db.Instance.DB()
			m := kitStorage.NewMigration(db, cfg.Database.MigPath, logger.LF())
			if err := m.Up(); err != nil {
				return err
			}
		}
		return nil
	})

	// db slave
	if cfg.Database.Slave != nil {
		grp.Go(func() error {
			var err error
			a.container.ReadOnlyDB, err = kitStorage.Open(cfg.Database.Slave, logger.LF())
			return err
		})
	}

	// Redis
	grp.Go(func() error {
		var err error
		a.container.Cache, err = kitCache.Open(cfg.Redis, logger.LF())
		return err
	})

	if err := grp.Wait(); err != nil {
		logger.L().E(err).St().Err("init storage")
		return err
	}

	return nil
}

func (a *adapterImpl) Close() {
	a.container.Db.Close()
	a.container.ReadOnlyDB.Close()
	a.container.Cache.Close()
}

func (a *adapterImpl) GetUserStorage() domain.UserStorage {
	a.l().Mth("GetUserStorage")
	return a.userStorage
}

func (a *adapterImpl) GetSessionStorage() domain.SessionStorage {
	a.l().Mth("GetUserStorage")
	return a.sessionStorage
}
