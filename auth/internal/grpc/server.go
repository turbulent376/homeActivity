// this file is generated by servgen util based on a template at 2021-06-26 10:37:24 +0300 MSK
package grpc

import (
	kitGrpc "git.jetbrains.space/orbi/fcsd/kit/grpc"
	"git.jetbrains.space/orbi/fcsd/auth/internal/domain"
	"git.jetbrains.space/orbi/fcsd/auth/internal/logger"
	"git.jetbrains.space/orbi/fcsd/auth/internal/meta"
	auth "git.jetbrains.space/orbi/fcsd/proto/auth"
)

// Server implements gRPC server
// Specify your protobuf contract in git.jetbrains.space/orbi/fcsd/proto.git/auth
type Server struct {
	*kitGrpc.Server
	authService domain.AuthService

    auth.UnimplementedAuthServiceServer
}

// New creates a new gRPC server
func New(authService domain.AuthService) *Server {
	return &Server{authService: authService}
}

// Init initializes gRPC server
func  (s *Server) Init(cfg *kitGrpc.ServerConfig) error {

    // grpc server
    gs, err := kitGrpc.NewServer(meta.Meta.ServiceCode(), logger.LF(), cfg)
    if err != nil {
        return err
    }
    s.Server = gs

    // register server
	auth.RegisterAuthServiceServer(s.Srv, s)
	return nil
}

// ListenAsync starts listening
// make sure it's executed as a goroutine
func (s *Server) ListenAsync() {
	go func () {
		err := s.Server.Listen()
		if err != nil {
			return
		}
	}()
}




