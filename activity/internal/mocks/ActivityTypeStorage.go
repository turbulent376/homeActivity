// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/turbulent376/homeactivity/activity/internal/domain"
)

// ActivityTypeStorage is an autogenerated mock type for the ActivityTypeStorage type
type ActivityTypeStorage struct {
	mock.Mock
}

// CreateActivityType provides a mock function with given fields: ctx, activityType
func (_m *ActivityTypeStorage) CreateActivityType(ctx context.Context, activityType *domain.ActivityType) (*domain.ActivityType, error) {
	ret := _m.Called(ctx, activityType)

	var r0 *domain.ActivityType
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ActivityType) *domain.ActivityType); ok {
		r0 = rf(ctx, activityType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ActivityType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.ActivityType) error); ok {
		r1 = rf(ctx, activityType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteActivityType provides a mock function with given fields: ctx, id
func (_m *ActivityTypeStorage) DeleteActivityType(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActivityType provides a mock function with given fields: ctx, id
func (_m *ActivityTypeStorage) GetActivityType(ctx context.Context, id string) (bool, *domain.ActivityType, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *domain.ActivityType
	if rf, ok := ret.Get(1).(func(context.Context, string) *domain.ActivityType); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.ActivityType)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListActivityTypes provides a mock function with given fields: ctx, familyId
func (_m *ActivityTypeStorage) ListActivityTypes(ctx context.Context, familyId string) (bool, []*domain.ActivityType, error) {
	ret := _m.Called(ctx, familyId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, familyId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 []*domain.ActivityType
	if rf, ok := ret.Get(1).(func(context.Context, string) []*domain.ActivityType); ok {
		r1 = rf(ctx, familyId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*domain.ActivityType)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, familyId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateActivityType provides a mock function with given fields: ctx, activityType
func (_m *ActivityTypeStorage) UpdateActivityType(ctx context.Context, activityType *domain.ActivityType) (*domain.ActivityType, error) {
	ret := _m.Called(ctx, activityType)

	var r0 *domain.ActivityType
	if rf, ok := ret.Get(0).(func(context.Context, *domain.ActivityType) *domain.ActivityType); ok {
		r0 = rf(ctx, activityType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ActivityType)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.ActivityType) error); ok {
		r1 = rf(ctx, activityType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
