// this file is generated by servgen util based on a template at 2021-06-26 10:37:24 +0300 MSK
package grpc

import (
	kitGrpc "git.jetbrains.space/orbi/fcsd/kit/grpc"
	pb "git.jetbrains.space/orbi/fcsd/proto/timesheet"
	"git.jetbrains.space/orbi/fcsd/timesheet/internal/domain"
	"git.jetbrains.space/orbi/fcsd/timesheet/internal/logger"
	"git.jetbrains.space/orbi/fcsd/timesheet/internal/meta"
)

// Server implements gRPC server
// Specify your protobuf contract in git.jetbrains.space/orbi/fcsd/proto.git/timesheet
type Server struct {
	*kitGrpc.Server
	activityService domain.ActivityService

	pb.UnimplementedActivityServiceServer
}

// New creates a new gRPC server
func New(activityService domain.ActivityService) *Server {
	return &Server{activityService: activityService}
}

// Init initializes gRPC server
func (s *Server) Init(cfg *kitGrpc.ServerConfig) error {

	// grpc server
	gs, err := kitGrpc.NewServer(meta.Meta.ServiceCode(), logger.LF(), cfg)
	if err != nil {
		return err
	}
	s.Server = gs

	// register server
	pb.RegisterActivityServiceServer(s.Srv, s)
	return nil
}

// ListenAsync starts listening
// make sure it's executed as a goroutine
func (s *Server) ListenAsync() {
	go func() {
		err := s.Server.Listen()
		if err != nil {
			return
		}
	}()
}
